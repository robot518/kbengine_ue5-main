/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

#pragma once
#include "KBECommon.h"
#include "KBETypes.h"
#include "MemoryStream.h"
#include "Bundle.h"
#include "DataTypes.h"
namespace KBEngine
{

	class KBENGINEPLUGINS_API DATATYPE_ENTITY_FORBID_COUNTER : DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, ENTITY_FORBID_COUNTER& datas);
		void addToStreamEx(Bundle& stream, const ENTITY_FORBID_COUNTER& v);
	};


	class KBENGINEPLUGINS_API DATATYPE_ENTITYID_LIST : DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, ENTITYID_LIST& datas);
		void addToStreamEx(Bundle& stream, const ENTITYID_LIST& v);
	};


	class KBENGINEPLUGINS_API DATATYPE_AVATAR_DATA : DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, AVATAR_DATA& datas);
		void addToStreamEx(Bundle& stream, const AVATAR_DATA& v);
	};


	class KBENGINEPLUGINS_API DATATYPE_AVATAR_INFOS : DATATYPE_BASE
	{
	public:
		DATATYPE_AVATAR_DATA data_DataType;
		void createFromStreamEx(MemoryStream& stream, AVATAR_INFOS& datas);
		void addToStreamEx(Bundle& stream, const AVATAR_INFOS& v);
	};


	class KBENGINEPLUGINS_API DATATYPE_AVATAR_INFOS_LIST : DATATYPE_BASE
	{
	public:
		class KBENGINEPLUGINS_API DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
		{
		public:
			DATATYPE_AVATAR_INFOS itemType;

			void createFromStreamEx(MemoryStream& stream, TArray<AVATAR_INFOS>& datas)
			{
				uint32 size = stream.readUint32();
				while (size > 0)
				{
					--size;
					itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
				};

			}

			void addToStreamEx(Bundle& stream, const TArray<AVATAR_INFOS>& v)
			{
				stream.writeUint32((uint32)v.Num());
				for (int i = 0; i < v.Num(); ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		};

		DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray values_DataType;

		void createFromStreamEx(MemoryStream& stream, AVATAR_INFOS_LIST& datas);
		void addToStreamEx(Bundle& stream, const AVATAR_INFOS_LIST& v);
	};


	class KBENGINEPLUGINS_API DATATYPE_BAG : DATATYPE_BASE
	{
	public:
		class KBENGINEPLUGINS_API DATATYPE__BAG_values22_ArrayType_ChildArray : public DATATYPE_BASE
		{
		public:
			class KBENGINEPLUGINS_API DATATYPE___BAG_values22_ArrayType_ArrayType_ChildArray : public DATATYPE_BASE
			{
			public:
				void createFromStreamEx(MemoryStream& stream, TArray<int64>& datas)
				{
					uint32 size = stream.readUint32();
					while (size > 0)
					{
						--size;
						datas.Add(stream.readInt64());
					};

				}

				void addToStreamEx(Bundle& stream, const TArray<int64>& v)
				{
					stream.writeUint32((uint32)v.Num());
					for (int i = 0; i < v.Num(); ++i)
					{
						stream.writeInt64(v[i]);
					};
				}
			};

			DATATYPE___BAG_values22_ArrayType_ArrayType_ChildArray itemType;

			void createFromStreamEx(MemoryStream& stream, TArray<TArray<int64>>& datas)
			{
				uint32 size = stream.readUint32();
				while (size > 0)
				{
					--size;
					itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
				};

			}

			void addToStreamEx(Bundle& stream, const TArray<TArray<int64>>& v)
			{
				stream.writeUint32((uint32)v.Num());
				for (int i = 0; i < v.Num(); ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		};

		DATATYPE__BAG_values22_ArrayType_ChildArray values22_DataType;

		void createFromStreamEx(MemoryStream& stream, BAG& datas);
		void addToStreamEx(Bundle& stream, const BAG& v);
	};


	class KBENGINEPLUGINS_API DATATYPE_EXAMPLES : DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, EXAMPLES& datas);
		void addToStreamEx(Bundle& stream, const EXAMPLES& v);
	};


	class KBENGINEPLUGINS_API DATATYPE_AnonymousArray_32 : DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas);
		void addToStreamEx(Bundle& stream, const TArray<int32>& v);
	};


}