/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

#pragma once

#include "KBECommon.h"

namespace KBEngine
{


// defined in */scripts/entity_defs/types.xml

typedef uint8 UINT8;

typedef uint16 UINT16;

typedef uint64 UINT64;

typedef uint32 UINT32;

typedef int8 INT8;

typedef int16 INT16;

typedef int32 INT32;

typedef int64 INT64;

typedef FString STRING;

typedef FString KBE_UNICODE;

typedef float FLOAT;

typedef double DOUBLE;

typedef TArray<uint8> PYTHON;

typedef TArray<uint8> PY_DICT;

typedef TArray<uint8> PY_TUPLE;

typedef TArray<uint8> PY_LIST;

typedef TArray<uint8> ENTITYCALL;

typedef TArray<uint8> BLOB;

typedef FVector2D VECTOR2;

typedef FVector3f VECTOR3;

typedef FVector4 VECTOR4;

class ENTITY_FORBID_COUNTER : public TArray<int8>
{
public:

	ENTITY_FORBID_COUNTER()
	{
	}

};

inline bool operator ==(const ENTITY_FORBID_COUNTER& a, const ENTITY_FORBID_COUNTER& b)
{
	return a == b;
};

class ENTITYID_LIST : public TArray<int32>
{
public:

	ENTITYID_LIST()
	{
	}

};

inline bool operator ==(const ENTITYID_LIST& a, const ENTITYID_LIST& b)
{
	return a == b;
};

class AVATAR_DATA
{
public:
	int8 param1;
	TArray<uint8> param2;

	AVATAR_DATA() :
		param1(0),
		param2()
	{
	}

};

inline bool operator ==(const AVATAR_DATA& a, const AVATAR_DATA& b)
{
	return a.param1 == b.param1 && a.param2 == b.param2;
};

class AVATAR_INFOS
{
public:
	uint64 dbid;
	FString name;
	uint8 roleType;
	uint16 level;
	AVATAR_DATA data;

	AVATAR_INFOS() :
		dbid(0),
		name(),
		roleType(0),
		level(0),
		data()
	{
	}

};

inline bool operator ==(const AVATAR_INFOS& a, const AVATAR_INFOS& b)
{
	return a.dbid == b.dbid && a.name == b.name && a.roleType == b.roleType && a.level == b.level && a.data == b.data;
};

class AVATAR_INFOS_LIST
{
public:
	TArray<AVATAR_INFOS> values;

	AVATAR_INFOS_LIST() :
		values()
	{
	}

};

inline bool operator ==(const AVATAR_INFOS_LIST& a, const AVATAR_INFOS_LIST& b)
{
	return a.values == b.values;
};

class BAG
{
public:
	TArray<TArray<int64>> values22;

	BAG() :
		values22()
	{
	}

};

inline bool operator ==(const BAG& a, const BAG& b)
{
	return a.values22 == b.values22;
};

class EXAMPLES
{
public:
	int64 k1;
	int64 k2;

	EXAMPLES() :
		k1(0),
		k2(0)
	{
	}

};

inline bool operator ==(const EXAMPLES& a, const EXAMPLES& b)
{
	return a.k1 == b.k1 && a.k2 == b.k2;
};


}